rng(1);

my_f = @(x,y) 4*(((x-0.5).*(x-0.5) + (y-0.5).*(y-0.5)) < 0.25);
% Prawdziwa wartość całki to pi

randpoints = 6000;
sz = 1;

[~, points] = P1Z60_PCH_MonteCarlo(my_f, randpoints, "basic");
scatter(points(1,:), points(2,:), sz)
title("basic")
subtitle("Jednostajnie wylosowane. Zdarzeją się grupki punktów")
input("");

disp("Wait 2 seconds")
[~, points] = P1Z60_PCH_MonteCarlo(my_f, randpoints, "quasiMC");
scatter(points(1,:), points(2,:), sz)
title("quasi Monte Carlo")
subtitle("Ciąg Faure - bardzo regularny")
input("");

[~, points] = P1Z60_PCH_MonteCarlo(my_f, randpoints, "reimann");
scatter(points(1,:), points(2,:), sz)
title("reimann")
subtitle("Równorozłożone")
input("");

[~, points] = P1Z60_PCH_MonteCarlo(my_f, randpoints, "imporftanceSampling", [1,2,1,5]);
scatter(points(1,:), points(2,:), sz)
title("Imporftance Sampling")
subtitle("Losowane zgodnie z rozkładem beta(1,2) x beta(1,5)")
input("");

[~, points] = P1Z60_PCH_MonteCarlo(my_f, randpoints, "latinHypercube");
scatter(points(1,:), points(2,:), sz)
title("Latin Hypercube")
subtitle("Jednostajnie wylosowane. Raczej nie zdarzeją się grupki punktów")
input("");

[~, points] = P1Z60_PCH_MonteCarlo(my_f, randpoints, "divideAndConquer", 50);
scatter(points(1,:), points(2,:), sz)
title("Divide And Conquer")
subtitle("Więcej losowanych tam, gdzie fun")
input("");